//Defination and comparision
//1)what is arrow function in java script,how does its syntax differ from a traditional function exprssion?
//A)An arrow function in JavaScript is a shorter way to write functions. It uses the => syntax instead of the function keyword.

//Syntax Comparison:
//Traditional function expression:
//const sum = function(a, b) {
 // return a + b;
//};

//Arrow function:
//const sum = (a, b) => a + b;
//Key Differences:
//Shorter syntax: Arrow functions are more concise.

//Traditional function requires function keyword, curly braces, and return keyword if returning a value.
//Arrow function eliminates the function keyword, curly braces (if it's a simple expression), and return keyword.

//In short, arrow functions are a cleaner and more concise way to write functions, especially when you don't need to define 
the function body with multiple statements.
//question-2
var add = (a,b)=>{
    return a+b;
}
console.log(add(2,3));

//Question3
var square=n => n*n;

console.log(square(4));

//question-4
//A)When an arrow function takes exactly one parameter, parentheses are optional.
// This makes the function shorter and cleaner.
// However, if there are zero or multiple parameters, parentheses are required.Multiple parameters (must use parentheses)
//No parameters (must use parentheses)

//question-5
// Here are the two versions of an arrow function that calculates the cube of a number:
// 1. Concise Body (Implicit Return)
// No {} needed.
// The return is implicit (automatically returned).
const cube1 = x => x * x * x;
console.log(cube1(3));

// Block Body (Explicit Return)
// Uses {} to define a block.
// Must use return explicitly
const cube2 = (x) => {
    return x * x * x;
  };
console.log(cube2(3)); // Output: 27

//Question-6
var sub = (a,b)=>{
    return a-b;
}
console.log(sub(5,1))

//Question-7
var word = ()=>{
    console.log("Hello,world!");
}
word();


